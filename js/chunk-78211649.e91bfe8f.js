(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-78211649"],{"010a":function(e,n){e.exports={open:function(){document.getElementById("solution-with-overlay").classList.toggle("open"),document.getElementById("openOverlayButton").disabled=!0;var e=document.getElementById("overlay");e.style.display="inline"},close:function(){document.getElementById("solution-with-overlay").classList.toggle("open"),document.getElementById("openOverlayButton").disabled=!1;var e=document.getElementById("overlay");e.style.display="none"}}},"153a":function(e,n,t){"use strict";t("8b42")},"69b4":function(e,n,t){"use strict";t("fb13")},"7e88":function(e,n,t){"use strict";t.r(n);var i=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("solution-with-overlay",{staticClass:"active",scopedSlots:e._u([{key:"exercise",fn:function(){return[e._v(" Schreiben Sie in Node.js zwei Programme merge_files.js und merge_streams.js, um große Dateien zu zeilenweise zusammenzuführen, merge_files.js mit fs.readFile und merge_streams.js mit Streams, also createReadFileStream und pipeline."),t("br"),t("br"),t("ul",{staticClass:"exerciseList"},[t("li",[e._v("node merge_files.js big_file1.txt big_file2.txt")]),t("li",[e._v("node merge_streams.js big_file1.txt big_file2.txt")])]),t("br"),e._v("Messen Sie anschließend die Performanz beider Programme. ")]},proxy:!0},{key:"solution",fn:function(){return[t("div",{staticClass:"container"},[t("p",[e._v("merge_files.js")]),t("pre",[t("highlight-code",{attrs:{lang:"javascript"}},[e._v("\n        const fs = require('fs').promises;\n\n        (async () => {\n            const timeStart = Date.now()\n            const input = process.argv.slice(2, 4)\n            const [text1, text2] = await Promise.all([\n                fs.readFile(input[0], 'utf-8'),\n                fs.readFile(input[1], 'utf-8')\n            ])\n\n            const lines1 = text1.split(\"\\r\\n\")\n            const lines2 = text2.split(\"\\r\\n\")\n\n            let count = 0\n            for (const line of lines1) {\n                await console.log(line + lines2[count++])\n            }\n            await console.log(`Time needed: ${Date.now() - timeStart} ms for ${text1.replaceAll('\\r\\n', ' ').length} chars in every file`)\n        })()\n      ")])],1),t("p",[e._v("merge_streams.js")]),t("pre",[t("highlight-code",{attrs:{lang:"javascript"}},[e._v("\n        const fs = require('fs');\n        const {pipeline} = require('stream/promises')\n\n        const timeStart = Date.now()\n        const input = process.argv.slice(2, 4)\n        let text1 = []\n        let text2 = []\n\n        async function read1() {\n            await pipeline(\n                fs.createReadStream(input[0], 'utf-8'),\n                async function (source) {\n                    source.setEncoding('utf-8')\n                    for await (const chunk of source) {\n                        text1.push(chunk)\n                    }\n                }\n            )\n        }\n\n        async function read2() {\n            await pipeline(\n                fs.createReadStream(input[1], 'utf-8'),\n                async function (source) {\n                    source.setEncoding('utf-8')\n                    for await (const chunk of source) {\n                        text2.push(chunk)\n                    }\n                }\n            )\n        }\n\n        (async () => {\n            await Promise.all([\n                read1().catch(console.error),\n                read2().catch(console.error)\n            ])\n\n            text1 = text1.toString().split('\\r\\n')\n            text2 = text2.toString().split('\\r\\n')\n\n            let i = 0\n            for await (const line of text1) {\n                console.log(line + ' ' + text2[i++])\n            }\n            console.log(`Time needed: ${Date.now() - timeStart} ms for ${text1.toString().replaceAll('\\r\\n', ' ').length} chars in every file`)\n        })()\n      ")])],1),t("p",[e._v("Ergebnisse der Performanz-Messungen")]),t("ul",{staticClass:"performanceList"},[t("li",[e._v("Textdatei jeweils 14813 chars")]),t("ul",[t("li",[e._v("merge_files: 26ms")]),t("li",[e._v("merge_streams: 30ms")])]),t("li",[e._v("Textdatei jeweils 29627 chars")]),t("ul",[t("li",[e._v("merge_files: 40ms")]),t("li",[e._v("merge_streams: 50ms")])])])])]},proxy:!0}])})},s=[],o=t("b9ba"),r={name:"Woche07Aufgabe2",title:"Web Engineering WS21/22 - Woche 7.2",components:{SolutionWithOverlay:o["a"]}},a=r,l=(t("69b4"),t("2877")),c=Object(l["a"])(a,i,s,!1,null,"2b6478e5",null);n["default"]=c.exports},"8b42":function(e,n,t){},b9ba:function(e,n,t){"use strict";var i=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{attrs:{id:"solution-with-overlay"}},[t("button",{attrs:{id:"openOverlayButton"},on:{click:e.open}},[t("b",[e._v("Aufgabe anzeigen")])]),t("div",{attrs:{id:"overlay"}},[t("button",{attrs:{id:"closeOverlayButton"},on:{click:e.close}},[t("font-awesome-icon",{attrs:{icon:"fa-solid fa-x"}})],1),t("h3",[e._v("Aufgabe")]),t("div",{attrs:{id:"exerciseSlot"}},[e._t("exercise")],2)]),t("div",{attrs:{id:"solution"}},[e._t("solution")],2)])},s=[],o=t("010a"),r=t.n(o),a={name:"SolutionWithOverlay",methods:{open:function(){return r.a.open()},close:function(){return r.a.close()}}},l=a,c=(t("153a"),t("2877")),u=Object(c["a"])(l,i,s,!1,null,"c5abef46",null);n["a"]=u.exports},fb13:function(e,n,t){}}]);
//# sourceMappingURL=chunk-78211649.e91bfe8f.js.map